
#Область ПрограммныйИнтерфейс

Функция ПолучитьКомпонентуСервер() Экспорт

	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
	КонецЕсли;
	
	Возврат КлиентКомпоненты;  
	
КонецФункции

Функция ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения) Экспорт
	
	Попытка
		КлиентКомпоненты.Connect(
				ПараметрыПодключения.Адрес,
				ПараметрыПодключения.Порт,
				ПараметрыПодключения.Логин,
				ПараметрыПодключения.Пароль,
				ПараметрыПодключения.ВиртуальныйХост);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения) Экспорт
	
	Попытка
		//КлиентКомпоненты.Connect(
		//	ПараметрыПодключения.Адрес,
		//	ПараметрыПодключения.Порт,
		//	ПараметрыПодключения.Логин,
		//	ПараметрыПодключения.Пароль,
		//	ПараметрыПодключения.ВиртуальныйХост);
		
		ТочкаОбмена    = ПараметрыПодключения.ТочкаОбмена;
		ТекстСообщения = ПараметрыПодключения.ТекстСообщения.Получить();
		Если ТекстСообщения = Неопределено Тогда
			ТекстСообщения = "n/e";
		КонецЕсли;	
		КлючМаршрутизации = ПараметрыПодключения.КлючМаршрутизации;
		
		КлиентКомпоненты.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
	Исключение
		//СистемнаяОшибка = ОписаниеОшибки();
		//ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		Возврат Ложь;
		//ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//Сообщить("Сообщение успешно отправлено!"); 

	Возврат Истина;
	
КонецФункции

Функция ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения) Экспорт
	
	Попытка
		//КлиентКомпоненты.Connect(
		//	ПараметрыПодключения.Адрес,
		//	ПараметрыПодключения.Порт,
		//	ПараметрыПодключения.Логин,
		//	ПараметрыПодключения.Пароль,
		//	ПараметрыПодключения.ВиртуальныйХост);
		
		ИмяОчереди = ПараметрыПодключения.ИмяОчереди;
		
		Попытка
			КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
			Иначе
				Возврат "Очередь пуста";
			КонецЕсли;
			
			КлиентКомпоненты.BasicCancel(""); 
			
			
			ПрочитатьJSONОбъекта(ИмяОчереди, ОтветноеСообщение);
			
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		//СистемнаяОшибка = ОписаниеОшибки();
		//ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат ОтветноеСообщение; 
	
КонецФункции     



Процедура ОбработатьСообщениеНоменклатуры (ОтветноеСообщение)
	
КонецПроцедуры	

Функция ПроверитьПодключениеПоНастройкамПодключения(НастройкаПодключения = Неопределено) Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодключенияRMQ.Адрес КАК Адрес,
		|	НастройкиПодключенияRMQ.Порт КАК Порт,
		|	НастройкиПодключенияRMQ.Логин КАК Логин,
		|	НастройкиПодключенияRMQ.Пароль КАК Пароль,
		|	НастройкиПодключенияRMQ.ТочкаОбмена КАК ТочкаОбмена,
		|	НастройкиПодключенияRMQ.ВиртуальныйХост КАК ВиртуальныйХост
		|ИЗ
		|	Справочник.НастройкиПодключенияRMQ КАК НастройкиПодключенияRMQ
		|ГДЕ
		|	НастройкиПодключенияRMQ.Ссылка = &Ссылка";
	
	Если НастройкаПодключения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиПодключенияRMQ.Ссылка = &Ссылка", "Истина");	
	Иначе	
		Запрос.УстановитьПараметр("Ссылка", НастройкаПодключения);
	КонецЕсли;	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПодключения = Новый Структура();
		ПараметрыПодключения.Вставить("Адрес");
		ПараметрыПодключения.Вставить("Порт");
		ПараметрыПодключения.Вставить("Логин");
		ПараметрыПодключения.Вставить("Пароль");
		ПараметрыПодключения.Вставить("ВиртуальныйХост");
		ПараметрыПодключения.Вставить("ТочкаОбмена");
		ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Выборка);
		
		КлиентКомпоненты = ПолучитьКомпонентуСервер();
		
		Если ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения) Тогда 
			
			Очереди = ПолучитьОчередиПоНастройке(НастройкаПодключения); 
			
			Если Не ПроверитьНаличиеОчереди(КлиентКомпоненты, ПараметрыПодключения, Очереди) Тогда
				Возврат Ложь;	
			КонецЕсли;	
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;	
				
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции	

Функция ВыполнитьОтправкуСообщенийПоНастройкамПодключения(НастройкаПодключения = Неопределено) Экспорт
	
	КлиентКомпоненты = Неопределено; 
	
	СостояниеОтправлено = Перечисления.СостояниеОтправикВRMQ.Отправлено;
	СостояниеОшибка = Перечисления.СостояниеОтправикВRMQ.ОшибкаОтправки; 
	
	мПодключений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодключенияRMQ.Ссылка КАК Ссылка,
		|	НастройкиПодключенияRMQ.Адрес КАК Адрес,
		|	НастройкиПодключенияRMQ.Порт КАК Порт,
		|	НастройкиПодключенияRMQ.Логин КАК Логин,
		|	НастройкиПодключенияRMQ.Пароль КАК Пароль,
		|	НастройкиПодключенияRMQ.ТочкаОбмена КАК ТочкаОбмена,
		|	НастройкиПодключенияRMQ.ВиртуальныйХост КАК ВиртуальныйХост
		|ИЗ
		|	Справочник.НастройкиПодключенияRMQ КАК НастройкиПодключенияRMQ
		|ГДЕ
		|	НастройкиПодключенияRMQ.Ссылка = &Ссылка";
	
	Если НастройкаПодключения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиПодключенияRMQ.Ссылка = &Ссылка", "Истина");	
	Иначе	
		Запрос.УстановитьПараметр("Ссылка", НастройкаПодключения);
	КонецЕсли;	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		Если КлиентКомпоненты = Неопределено Тогда 
			
			ПараметрыПодключения = Новый Структура();
			ПараметрыПодключения.Вставить("Адрес");
			ПараметрыПодключения.Вставить("Порт");
			ПараметрыПодключения.Вставить("Логин");
			ПараметрыПодключения.Вставить("Пароль");
			ПараметрыПодключения.Вставить("ВиртуальныйХост");
			ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Выборка);
			
			
			КлиентКомпоненты = ПолучитьКомпонентуСервер();
			Если ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения) Тогда
				мПодключений.Добавить(Выборка.Ссылка);	
			КонецЕсли;	
		КонецЕсли;  
			
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщенияКОтправке.Объект КАК Объект,
	|	СообщенияКОтправке.НастройкаПодключения КАК НастройкаПодключения,
	|	СообщенияКОтправке.КлючМаршрутизации КАК КлючМаршрутизации,
	|	СообщенияКОтправке.Состояние КАК Состояние,
	|	СообщенияКОтправке.ТекстСообщения КАК ТекстСообщения,
	|	СообщенияКОтправке.НастройкаПодключения.Адрес КАК Адрес,
	|	СообщенияКОтправке.НастройкаПодключения.Порт КАК Порт,
	|	СообщенияКОтправке.НастройкаПодключения.Логин КАК Логин,
	|	СообщенияКОтправке.НастройкаПодключения.Пароль КАК Пароль,
	|	СообщенияКОтправке.НастройкаПодключения.ТочкаОбмена КАК ТочкаОбмена,
	|	СообщенияКОтправке.НастройкаПодключения.ВиртуальныйХост КАК ВиртуальныйХост
	|ИЗ
	|	РегистрСведений.СообщенияКОтправке КАК СообщенияКОтправке
	|ГДЕ
	|	СообщенияКОтправке.Состояние <> &СостояниеОтправлено
	|	И СообщенияКОтправке.НастройкаПодключения В (&НастройкаПодключения)";
	
	Запрос.УстановитьПараметр("СостояниеОтправлено", Перечисления.СостояниеОтправикВRMQ.Отправлено);
	Запрос.УстановитьПараметр("НастройкаПодключения", мПодключений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 
	
	Отправлено = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПодключения = Новый Структура();
		
		Если РаботаСRMQ.ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, Выборка) Тогда
			РегистрыСведений.СообщенияКОтправке.ОтметитьОтправку(Выборка, СостояниеОтправлено);
		Иначе
			РегистрыСведений.СообщенияКОтправке.ОтметитьОтправку(Выборка, СостояниеОшибка); 
			Отправлено = Ложь;
		КонецЕсли;	
		
	КонецЦикла;

	Возврат Отправлено;

КонецФункции	

Процедура ОтправитьСообщениеСервер(ПараметрыПодключения) Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения);
	
КонецПроцедуры 

Функция ПолучитьJSONСообщения(Запись)  Экспорт
	
	НаборЗаписей = РегистрыСведений.СообщенияКОтправке.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Запись.Объект);
	НаборЗаписей.Отбор.НастройкаПодключения.Установить(Запись.НастройкаПодключения);
	НаборЗаписей.Отбор.КлючМаршрутизации.Установить(Запись.КлючМаршрутизации); 
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат НаборЗаписей[0].ТекстСообщения.Получить();
	Иначе 
		Возврат "";
	КонецЕсли;	
	
КонецФункции 

Функция ПолучитьJSONСообщенияСправочника(Ссылка)  Экспорт
		
	Возврат Ссылка.ТекстСообщения.Получить(); 
	
КонецФункции

Функция СформироватьJSONОбъекта(Объект)  Экспорт 
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	СериализуемоеЗначение = Объект.ПолучитьОбъект();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СериализуемоеЗначение, НазначениеТипаXML.Явное);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции  

Функция СформироватьJSONРегистра(Параметры) Экспорт
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);   
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Объект = Параметры.ДанныеРегистра;
	
	Если СтрНайти(Параметры.Объект, "ЦеныТоваров") Тогда
		ДанныеJSON = СтруктураПоРегистру_ЦеныТоваров(Объект);	
	КонецЕсли;	
		
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON, НастройкиСериализацииJSON);
		
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
	
КонецФункции

Функция СтруктураПоРегистру_ЦеныТоваров(Объект)
	
	Цены = Новый Структура();
	Цены.Вставить("Период", Объект.Период);
	Цены.Вставить("Товар", Строка(Объект.Товар.УникальныйИдентификатор())); 
	Цены.Вставить("ВидЦенСсылка", Строка(Объект.ВидЦен.УникальныйИдентификатор()));
	Цены.Вставить("ВидЦенНаименование", Объект.ВидЦен.Наименование);
	Цены.Вставить("Цена", Объект.Цена);

	Возврат Цены;
	
КонецФункции	

Функция ПрочитатьJSONОбъекта(ИмяОчереди, ПолученноеСообщение)  Экспорт    
	
	ЭтоОбъект = Истина;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ПолученноеСообщение); 
	
	Если ИмяОчереди = "coast" Тогда
		ЭтоОбъект = Ложь;
	КонецЕсли;	
	
	Если ЭтоОбъект Тогда
		Данные = СериализаторXDTO.ПрочитатьJSON(Чтение); 
		Данные.Записать(); 
	Иначе
		Данные = ПрочитатьJSONРегистра(ПолученноеСообщение, Чтение);
	КонецЕсли;	
		
	Чтение.Закрыть();
		
	Возврат Данные;

	
КонецФункции	

Функция ПрочитатьJSONРегистра(ПолученноеСообщение, Чтение) 
	
	Если ПолученноеСообщение.ИмяОчереди = "coast" Тогда
		ПрочитатьJSONРегистра_ЦеныТоваров(Чтение);		
	КонецЕсли;
	
КонецФункции	  

Процедура ПрочитатьJSONРегистра_ЦеныТоваров(Чтение)  
	
	ИмяТекущегоТэга = "";
	
	Период = Дата(1,1,1);
	Товар = Неопределено; 
	ВидЦены = Неопределено;
	Цена = 0;   
	
	Цены = ПрочитатьJSON(Чтение, , "Период", ФорматДатыJSON.ISO);
	
	Для каждого Цена Из Цены Цикл 
		
		ИмяТекущегоТэга = Цена.Ключ;
		
		Если ИмяТекущегоТэга = "Период" Тогда
			Период = Дата(Цена.Значение);
			ИмяТекущегоТэга = "";
		КонецЕсли;   
		
		Если ИмяТекущегоТэга = "Товар" Тогда 
			Товар = ПолучитьСсылку_Товар(Цена.Значение, "Обмен данными");
			//Товар = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(Цена.Значение));
			ИмяТекущегоТэга = "";
		КонецЕсли;   
		
		Если ИмяТекущегоТэга = "ВидЦенСсылка" Тогда 
			ВидЦены = ПолучитьСсылку_ВидЦены(Цена.Значение, "Обмен данными");
			//ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(Цена.Значение));
			ИмяТекущегоТэга = "";
		КонецЕсли;
		
		Если ИмяТекущегоТэга = "Цена" Тогда
			Цена = Число(Цена.Значение);
			ИмяТекущегоТэга = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Товар) И ЗначениеЗаполнено(ВидЦены)  Тогда 
		
		НЗ = РегистрыСведений.ЦеныТоваров.СоздатьНаборЗаписей();
		НЗ.ОбменДанными.Загрузка = Истина;
		НЗ.Отбор.Период.Установить(Период);
		НЗ.Отбор.Товар.Установить(Товар);
		НЗ.Отбор.ВидЦен.Установить(ВидЦены); 
		НЗ.Прочитать();
		Если НЗ.Количество() = 0 Тогда
			НоваяЗапись = НЗ.Добавить();
		Иначе
			НоваяЗапись = НЗ[0];
		КонецЕсли;	
		
		НоваяЗапись.Период = Период;
		НоваяЗапись.Товар = Товар;
		НоваяЗапись.ВидЦен = ВидЦены;
		НоваяЗапись.Цена = Цена;  
		
		НЗ.Записать();
		
	КонецЕсли;	

	
КонецПроцедуры	

Функция ПолучитьСсылку_Товар(ГУИД, Наименование)  
	
	Товар = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД)); 
	Если Товар = Неопределено Тогда
		НовыйТовар = Справочники.Товары.СоздатьЭлемент(); 
		УИД = Новый УникальныйИдентификатор(ГУИД);
		Ссылка = Справочники.Товары.ПолучитьСсылку(УИД);
		НовыйТовар.УстановитьНовыйКод(); 
		НовыйТовар.Наименование = Наименование;
		НовыйТовар.ОбменДанными.Загрузка = Истина; 
		НовыйТовар.УстановитьСсылкуНового(Ссылка);
		НовыйТовар.Записать();  
		
		Возврат НовыйТовар;
	КонецЕсли;	
	
	Возврат Товар;
	
КонецФункции

Функция ПолучитьСсылку_ВидЦены(ГУИД, Наименование)  
	
	Товар = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД)); 
	Если Товар = Неопределено Тогда
		НовыйВидЦены = Справочники.ВидыЦен.СоздатьЭлемент();
		УИД = Новый УникальныйИдентификатор(ГУИД);
        Ссылка = Справочники.ВидыЦен.ПолучитьСсылку(УИД);
		НовыйВидЦены.УстановитьНовыйКод();
		НовыйВидЦены.Наименование = Наименование; 
		НовыйВидЦены.ОбменДанными.Загрузка = Истина; 
		НовыйВидЦены.УстановитьСсылкуНового(Ссылка);
		НовыйВидЦены.Записать();  
		
		Возврат НовыйВидЦены;
	КонецЕсли;	
	
	Возврат Товар;
	
КонецФункции

Функция ВыполнитьПолучениеСообщенийПоНастройкамПодключения(НастройкаПодключения = Неопределено) Экспорт  
	
	КлиентКомпоненты = Неопределено; 
	
	мПодключений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПодключенияRMQ.Ссылка КАК Ссылка,
		|	НастройкиПодключенияRMQ.Адрес КАК Адрес,
		|	НастройкиПодключенияRMQ.Порт КАК Порт,
		|	НастройкиПодключенияRMQ.Логин КАК Логин,
		|	НастройкиПодключенияRMQ.Пароль КАК Пароль,
		|	НастройкиПодключенияRMQ.ТочкаОбмена КАК ТочкаОбмена,
		|	НастройкиПодключенияRMQ.ВиртуальныйХост КАК ВиртуальныйХост
		|ИЗ
		|	Справочник.НастройкиПодключенияRMQ КАК НастройкиПодключенияRMQ
		|ГДЕ
		|	НастройкиПодключенияRMQ.Ссылка = &Ссылка";
	
	Если НастройкаПодключения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиПодключенияRMQ.Ссылка = &Ссылка", "Истина");	
	Иначе	
		Запрос.УстановитьПараметр("Ссылка", НастройкаПодключения);
	КонецЕсли;	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		Если КлиентКомпоненты = Неопределено Тогда 
			
			ПараметрыПодключения = Новый Структура();
			ПараметрыПодключения.Вставить("Адрес");
			ПараметрыПодключения.Вставить("Порт");
			ПараметрыПодключения.Вставить("Логин");
			ПараметрыПодключения.Вставить("Пароль");
			ПараметрыПодключения.Вставить("ВиртуальныйХост");
			ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Выборка);
			
			
			КлиентКомпоненты = ПолучитьКомпонентуСервер();
			Если ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ПараметрыПодключения) Тогда
				мПодключений.Добавить(Выборка.Ссылка);	
			КонецЕсли;	
		КонецЕсли;  
			
	КонецЦикла;	
	
	
   	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	НастройкиПодключенияRMQОчереди.Владелец КАК НастройкаПодключения,
		|	НастройкиПодключенияRMQОчереди.Наименование КАК ИмяОчереди,
		|	НастройкиПодключенияRMQОчереди.Владелец.Адрес КАК Адрес,
		|	НастройкиПодключенияRMQОчереди.Владелец.Порт КАК Порт,
		|	НастройкиПодключенияRMQОчереди.Владелец.Логин КАК Логин,
		|	НастройкиПодключенияRMQОчереди.Владелец.Пароль КАК Пароль,
		|	НастройкиПодключенияRMQОчереди.Владелец.ТочкаОбмена КАК ТочкаОбмена,
		|	НастройкиПодключенияRMQОчереди.Владелец.ВиртуальныйХост КАК ВиртуальныйХост
		|ИЗ
		|	Справочник.ПодключенияКОчереди КАК НастройкиПодключенияRMQОчереди
		|ГДЕ
		|	НастройкиПодключенияRMQОчереди.Владелец В(&НастройкаПодключения)";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", мПодключений);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОтветСообщения = "";
	ПрочитаноУспешно = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Пока ОтветСообщения <> "Очередь пуста" И ОтветСообщения <> Ложь Цикл
			ОтветСообщения = ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, Выборка);
			Если ОтветСообщения = Ложь Тогда
				ПрочитаноУспешно = Ложь;
			КонецЕсли;
			
			Если ОтветСообщения <> "Очередь пуста" И ОтветСообщения <> Ложь Тогда
				Справочники.ПолученныеСообщения.ДобавитьЭлемент(Выборка, ОтветСообщения);
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
    Возврат ПрочитаноУспешно;
	
КонецФункции	

Процедура ВыполнитьОбменRMQРегламент() Экспорт
	
	ВыполнитьОтправкуСообщенийПоНастройкамПодключения();
	
	ВыполнитьПолучениеСообщенийПоНастройкамПодключения(); 
	
КонецПроцедуры	

Функция ПроверитьНаличиеОчереди(КлиентКомпоненты, ПараметрыПодключения, Очереди) Экспорт  
		
	Попытка
		КлиентКомпоненты.Connect(
			ПараметрыПодключения.Адрес,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Логин,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.ВиртуальныйХост);
			
		ТочкаОбмена = ПараметрыПодключения.ТочкаОбмена;
		
		
		//КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		Для каждого Очередь Из Очереди Цикл
			ИмяОчереди  = Очередь.Значение;
			КлиентКомпоненты.DeclareQueue(ИмяОчереди, Истина, Ложь, Ложь, Ложь);
		КонецЦикла;	
		
		Возврат Истина;
		
		//Возврат КлиентКомпоненты.DeclareQueue(ИмяОчереди, Истина, Ложь, Ложь, Ложь);
		//КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
	Исключение
		
		Возврат Ложь;
		//СистемнаяОшибка = ОписаниеОшибки();
		//ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		//ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	//
	//Сообщить("Точки и очереди успешно созданы!");
	
КонецФункции

Функция ПолучитьОчередиПоНастройке(НастройкаПодключения) 
	
	Очереди = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключенияКОчереди.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПодключенияКОчереди КАК ПодключенияКОчереди
		|ГДЕ
		|	ПодключенияКОчереди.Владелец = &НастройкаПодключения
		|	И НЕ ПодключенияКОчереди.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Очереди.Добавить(Выборка.Наименование);
	КонецЦикла;
	
	Возврат Очереди;
	
КонецФункции	

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			"ОбщийМакет.PinkRabbitMQ",
			"BITERP",
			ТипВнешнейКомпоненты.Native);
			
	//Сообщить(НСтр("ru = 'Компонента подключена!'"));
	
КонецПроцедуры 

#КонецОбласти

